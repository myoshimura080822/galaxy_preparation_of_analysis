<tool id="SummaryOfSailfishInfo" name="SummaryOfSailfishInfo" version="0.01">


<command interpreter="python">

        SummaryOfSailfishInfo.py --script_path "$runMe" --interpreter "Rscript" 
            --tool_name "SummaryOfSailfishInfo" --input_tab "$input1" --output_dir "$html_file.files_path" --output_tab "$tab_file" --output_html "$html_file" --make_HTML "yes"
</command>
<inputs>
<param name="input1"  type="data" format="None" label="Select a suitable input file from your history"/> 
<param name="job_name" type="text" label="Supply a name for the outputs to remind you what they contain" value="SummaryOfSailfishInfo"/> 

</inputs>
<outputs>
 <data format="tabular" name="tab_file" label="${job_name}"/>
 <data format="html" name="html_file" label="${job_name}.html"/>
</outputs>
<configfiles>
<configfile name="runMe">
library("dplyr")
library("plyr")
library("tidyr")
library("stringr")
library("ggplot2")

ourargs = commandArgs(TRUE)
inf = ourargs[1]
outf = ourargs[2]
cat("input file name:");inf
cat("output file name:");outf
cat("\n")

path_list &lt;- read.table(inf, header=T, row.names=1, sep="\t")
head(path_list)

data &lt;- ldply(
  as.character(path_list[["file_name"]]),
  function(x){
    data.frame(filename=subset(path_list, file_name==x, select=name),
               str_split_fixed(matrix(scan(x, what = character(), sep = "\n", nlines = 4), 4, byrow=T), "\\t", 2))
  }
)  %&gt;% separate(name, c("dataset", "dummy"), ":", remove=TRUE) %&gt;% .[, colnames(.) != "dummy"]  %&gt;% spread(dataset, X2)

colnames(data) &lt;- gsub(" ", "_", colnames(data))
rownames(data) &lt;- data\$X1
data &lt;- data[, colnames(data) != "X1"]

dset_name = unlist(colnames(data))
total_reads = as.numeric(as.character(unname(unlist(data[3,]))))
mapped_ratio = as.numeric(as.character(unname(unlist(data[2,]))))
plot_info = data.frame(dset_name,total_reads,mapped_ratio)

ggplot(plot_info, aes(mapped_ratio,total_reads)) + 
  geom_point(size=3, alpha=0.7, aes(colour=ifelse(mapped_ratio&lt;0.75, 'red','blue'))) +
  geom_text(aes(label=ifelse(mapped_ratio&gt;0.75,'',as.character(dset_name))),size=4,hjust=0.0,vjust=1.0, angle=45) +
  theme(legend.position="none")

ggsave(file="sailfish_result.png", width=10, height=8, dpi=100)
write.table(plot_info, outf, quote=F, sep="\t", append=F)

cat("....All Done. End of Script\n")
</configfile>
</configfiles>


        <tests>
        <test>
        <param name="input1" value="SummaryOfSailfishInfo_test1_input.xls" ftype="None"/>
        <param name="job_name" value="test1"/>
        <param name="runMe" value="$runMe"/>
        <output name="tab_file" file="SummaryOfSailfishInfo_test1_output.xls" ftype="tabular"/>
        </test>
        </tests>
        

<help>


**What it Does**

**Script**
Pressing execute will run the following code over your input file and generate some outputs in your history::


 library("dplyr")
 library("plyr")
 library("tidyr")
 library("stringr")
 
 ourargs = commandArgs(TRUE)
 inf = ourargs[1]
 outf = ourargs[2]
 cat("input file name:");inf
 cat("output file name:");outf
 cat("\n")
 
 path_list &lt;- read.table(inf, header=T, row.names=1, sep="\t")
 head(path_list)
 
 data &lt;- ldply(
   as.character(path_list[["file_name"]]),
   function(x){
     data.frame(filename=subset(path_list, file_name==x, select=name),
                str_split_fixed(matrix(scan(x, what = character(), sep = "\n", nlines = 4), 4, byrow=T), "\\t", 2))
   }
 )  %&gt;% separate(name, c("dataset", "dummy"), ":", remove=TRUE) %&gt;% .[, colnames(.) != "dummy"]  %&gt;% spread(dataset, X2)
 
 colnames(data) &lt;- gsub(" ", "_", colnames(data))
 rownames(data) &lt;- data\$X1
 data &lt;- data[, colnames(data) != "X1"]
 
 dset_name = unlist(colnames(data))
 total_reads = as.numeric(as.character(unname(unlist(data[3,]))))
 mapped_ratio = as.numeric(as.character(unname(unlist(data[2,]))))
 plot_info = data.frame(dset_name,total_reads,mapped_ratio)
 
 write.table(plot_info, outf, quote=F, sep="\t", append=F)
 
 cat("....All Done. End of Script\n")

**Attribution**
This Galaxy tool was created by admin@galaxy.org at 06/05/2015 08:31:17
using the Galaxy Tool Factory.

See https://bitbucket.org/fubar/galaxytoolfactory for details of that project
Please cite: Creating re-usable tools from scripts: The Galaxy Tool Factory. Ross Lazarus; Antony Kaspi; Mark Ziemann; The Galaxy Team. 
Bioinformatics 2012; doi: 10.1093/bioinformatics/bts573


</help>
<citations>
    
    <citation type="doi">10.1093/bioinformatics/bts573</citation>
</citations>
</tool>

