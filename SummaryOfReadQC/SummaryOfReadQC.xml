<tool id="SummaryOfReadQC" name="SummaryOfReadQC" version="0.01">
<description>outputs as plot of perGC, total-reads and Sailfish mapping ratio</description>

<command interpreter="python">

        SummaryOfReadQC.py --script_path "$runMe" --interpreter "Rscript" --tool_name "SummaryOfReadQC" --input_tab "$input_fastqc" --input_countinfo "$input_countinfo" --input_int "$input2" --output_dir "$html_file.files_path" --output_tab "$tab_file" --output_fqc "$tab_fqc" --output_sf "$tab_sf" --output_html "$html_file" --make_HTML "yes" 
</command>
<inputs>
    <param name="input_fastqc"  type="data" format="tabular" label="Select a 'GetFastQCRawDataFiles' output file from your history"/> 
    <param name="input_countinfo"  type="data" format="tabular" label="Select a 'GetQuantityCountInfo' output file from your history"/> 
    <param name="input2"  type="text" label="Please input a number of cell-name index in column-name(separated '_')" value="1"/> 
    <param name="job_name" type="text" label="Supply a name for the outputs to remind you what they contain" value="SummaryOfReadQC"/> 
</inputs>
<outputs>
    <data format="tabular" name="tab_file" label="${job_name} on ${on_string}: Merged summary(single-end only)"/>
    <data format="tabular" name="tab_fqc" label="${job_name} on ${on_string}: FastQC summary"/>
    <data format="tabular" name="tab_sf" label="${job_name} on ${on_string}: CountInfo summary"/>
    <data format="html" name="html_file" label="${job_name} on ${on_string}.html"/>
</outputs>
<configfiles>
<configfile name="runMe">
library("dplyr")
library("plyr")
library("tidyr")
library("stringr")
library("ggplot2")
library("pairsD3")
library("magrittr")
library("jsonlite")

ourargs = commandArgs(TRUE)
inf = ourargs[1]
inf_sf = ourargs[2]
cell_idx = ourargs[3]
outf = ourargs[4]
outf_fqc = ourargs[5]
outf_sf = ourargs[6]
cat("input fastqc data:");inf
cat("input countinfo data:");inf_sf
cell_idx = as.integer(cell_idx)
cat("cell-name index: ");cell_idx
cat("output file name:");outf
cat("\n")

############ fastqc summary ##############
path_list &lt;- read.table(inf, header=T, row.names=1, sep="\t")
head(path_list)

data &lt;- ldply(
  as.character(path_list[["file_name"]]),
  function(x){
    data.frame(sample_name = subset(path_list, file_name == x, select = sample_name),
               str_split_fixed(matrix(scan(x, what = character(), sep = "\n", nlines = 7, skip = 3), 7, byrow=T), "\\t", 2))
  }
) %&gt;% spread(sample_name,X2)

rownames(data) &lt;- sub(" ", "_", data\$X1)
data &lt;- data[, colnames(data) != "X1"]

#file_name = str_sub(as.character(unname(unlist(data["Filename",]))), start = 1, end = 17)
file_name = unlist(colnames(data))
total_seq = as.numeric(as.character(unname(unlist(data["Total_Sequences",]))))
per_GC = as.numeric(as.character(unname(unlist(data["%GC",]))))
outp &lt;- data.frame(file_name,total_seq,per_GC)

well_idx = cell_idx + 1 
outp\$cell_type &lt;- str_split_fixed(outp\$file_name, "_", well_idx)[,cell_idx]
outp\$well &lt;- str_split_fixed(outp\$file_name, "_", well_idx)[,well_idx]
head(outp)
cat("\n")

CIset &lt;- function(x, y, g, w, conf){
  data.frame(x=x, y=y, cell_type=g, well=w,
             upper = mean(y)+qt(conf,length(y)-1)*sd(y)/sqrt(length(y)),
             lower = mean(y)-qt(conf,length(y)-1)*sd(y)/sqrt(length(y)))
}

plot_tseq &lt;- CIset(outp\$file_name, log10(outp\$total_seq), outp\$cell_type, outp\$well, 0.99)

plot_t &lt;- ggplot(plot_tseq, aes(x=x,y=y)) +
  geom_point(size=3, alpha=0.7, aes(colour=cell_type)) +
  geom_text(aes(label=ifelse(y&lt;upper+0.1 &amp; y&gt;lower-0.1, "", as.character(plot_tseq\$well))), size=4, hjust=0.0, vjust=1.0) +
  geom_smooth(method="lm", se=FALSE, aes(group=cell_type)) +
  geom_ribbon(aes(ymin=lower, ymax=upper, group=cell_type, fill=cell_type), alpha=0.25) +
  scale_y_continuous(limits=c(min(plot_tseq\$y) -0.5, max(plot_tseq\$y) +0.5)) +
  xlab("Sample") + ylab("TotalSeq(log10)") + 
  theme(axis.text.x=element_text(size=6, angle=90))

plot_gc &lt;- ggplot(outp, aes(file_name,per_GC)) +
  geom_bar(alpha=0.7, aes(fill=cell_type), stat="identity") +
  ylim(0, 100) +
  xlab("Sample")+ylab("%GC") +
  scale_x_discrete(labels=outp\$well) + 
  theme(axis.text.x=element_text(size=6, angle=90))

ggsave(file="fastqc_totalseq.png", plot=plot_t, width=18, height=4, dpi=100)
ggsave(file="fastqc_perGC.png", plot=plot_gc, width=18, height=4, dpi=100)

write.table(outp, outf_fqc, quote=F, sep="\t")

############ countinfo summary ##############
path_list &lt;- read.table(inf_sf, header=T, row.names=1, sep="\t")
head(path_list)

if (length(grep("reads_count_info", path_list[["name"]])) > 0) {

    data &lt;- ldply(
        as.character(path_list[["file_name"]]),
        function(x){
            data.frame(filename=subset(path_list, file_name==x, select=sample_name),
            str_split_fixed(matrix(scan(x, what = character(), sep = "\n", nlines = 4), 4, byrow=T), "\\t", 2))
        }
    ) %&gt;% spread(sample_name, X2)

    rownames(data) &lt;- data\$X1
    data &lt;- data[, colnames(data) != "X1"]

    file_name = unlist(colnames(data))
    total_reads = as.numeric(as.character(unname(unlist(data[3,]))))
    mapped_ratio = as.numeric(as.character(unname(unlist(data[2,]))))

} else if (length(grep("meta_info", path_list[["name"]])) > 0){

    data &lt;- ldply(
    as.character(path_list[["file_name"]]),
        function(x){
            tmp = fromJSON(x)
            data.frame(filename=subset(path_list, file_name==x, select=sample_name),
            mapped_ratio=tmp\$percent_mapped,
            total_reads=tmp\$num_processed)
        }
    )
    
    rownames(data) &lt;- data\$sample_name
    file_name = unlist(rownames(data))
    total_reads = as.numeric(data\$total_reads)
    mapped_ratio = as.numeric(data\$mapped_ratio) * 0.01

} else {

    data &lt;- ldply(
    as.character(path_list[["file_name"]]),
        function(x){
            data.frame(filename=subset(path_list, file_name==x, select=sample_name),
            str_split_fixed(matrix(scan(x, what = character(), sep = "\n", nlines = 5), 5, byrow=T), "[!-/]", 3))
        }
    ) %&gt;% select(sample_name, X1, X2) %&gt;% spread(X2, X1)

    colnames(data) &lt;- gsub("0 ", "", colnames(data))
    rownames(data) &lt;- data\$sample_name
    data &lt;- data[,3:4]
    colnames(data) &lt;- c("total_reads", "mapped")
    data\$mapped_ratio &lt;- as.numeric(data[,2])/as.numeric(data[,1])

    file_name = unlist(rownames(data))
    total_reads = as.numeric(data\$total_reads)
    mapped_ratio = as.numeric(data\$mapped_ratio)
}

outp_sf = data.frame(file_name,total_reads,mapped_ratio)
outp_sf\$cell_type &lt;- str_split_fixed(outp_sf\$file_name, "_", well_idx)[,cell_idx]
outp_sf\$well &lt;- str_split_fixed(outp_sf\$file_name, "_", well_idx)[,well_idx]
head(outp_sf)

ciset &lt;- CIset(outp_sf\$file_name, outp_sf\$mapped_ratio, outp_sf\$cell_type, outp_sf\$well, 0.99)
lower &lt;- round(as.numeric(ciset\$lower,2),2)

ggplot(outp_sf, aes(file_name, mapped_ratio)) +
  layer(data=outp_sf, 
        mapping=aes(x=file_name, y=1, fill=cell_type), 
        geom="bar", stat="identity", position="identity", alpha=0.25) +
  geom_bar(alpha=0.7, aes(fill=cell_type), stat="identity") +
  ylim(0, 1) +
  xlab("Sample")+ylab("Mapped Ratio") +
  scale_x_discrete(labels=outp_sf\$well) + 
  theme(axis.text.x=element_text(size=6, angle=90)) + 
  geom_text(aes(label=ifelse(outp_sf\$mapped_ratio &gt; lower, "", as.character(round(outp_sf\$mapped_ratio, 2)))), size=3, hjust=0.0, vjust=1.0)

ggsave(file="result_mapped_ratio.png", width=18, height=4, dpi=100)

write.table(outp_sf, outf_sf, quote=F, sep="\t")

if (nrow(outp) == nrow(outp_sf)) {
  ############ merged both summary ##############

  merge_d &lt;- inner_join(outp, outp_sf, by="file_name")
  merge_d &lt;- data.frame(log10(merge_d\$total_seq), merge_d\$per_GC*0.01, merge_d\$mapped_ratio, merge_d\$cell_type.x, merge_d\$well.x)
  colnames(merge_d) &lt;- c("total_seq","per_GC","mapped_ratio", "cell_type", "well")
  rownames(merge_d) &lt;- paste(merge_d\$cell_type, merge_d\$well, sep='_')
  head(merge_d)

  pairsD3(merge_d[,1:3], group=merge_d\$cell_type, labels=c("Total Seq(Log)", "%GC", "Mapped Ratio"), cex=5, leftmar=40, topmar=15) %&gt;% savePairs(file = "fastqc_and_sailfish_result.html")

  write.table(merge_d, outf, quote=F, sep="\t")
}

cat("....All Done. End of Script\n")
</configfile>
</configfiles>


        <tests>
        <test>
        <param name="input1" value="SummaryOfReadQC_test1_input.xls" ftype="None"/>
        <param name="job_name" value="test1"/>
        <param name="runMe" value="$runMe"/>
        <output name="tab_file" file="SummaryOfReadQC_test1_output.xls" ftype="tabular"/>
        </test>
        </tests>
        

<help>

This tool outputs as plot of perGC, total-reads and Sailfish mapping ratio from specified history.

**Attribution**
This Galaxy tool was created by mika.yoshimura@riken.jp at 03/06/2015 11:30:14
using the Galaxy Tool Factory.

See https://bitbucket.org/fubar/galaxytoolfactory for details of that project
Please cite: Creating re-usable tools from scripts: The Galaxy Tool Factory. Ross Lazarus; Antony Kaspi; Mark Ziemann; The Galaxy Team. 
Bioinformatics 2012; doi: 10.1093/bioinformatics/bts573

</help>
<citations>
    
    <citation type="doi">10.1093/bioinformatics/bts573</citation>
</citations>
</tool>

